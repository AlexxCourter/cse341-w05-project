{
  "swagger": "2.0",
  "info": {
    "title": "Achievements API",
    "description": "This API allows the client to create, read, update, and delete Users of the Gamified Goal-setting Achievements Application.",
    "version": "1.0.0"
  },
  "host": "achievementsapp.onrender.com",
  "basePath": "/",
  "schemes": ["https"],
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "authorizationUrl": "https://accounts.google.com/o/oauth2/v2/auth",
      "flow": "implicit",
      "scopes": {
        "read_Users": "Authority to read Users in database granted on authentication.",
        "write_Users": "Authority to write Users to database granted on authentication.",
        "read_Achievements": "Authority to read Achievements in database granted on authentication.",
        "write_Achievements": "Authority to write Achievements to database granted on authentication."
      }
    }
  },
  "paths": {
    "/user/": {
      "get": {
        "tags": ["User"],
        "description": "Returns all Users registered in the database.",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returned all users successfully."
          },
          "400": {
            "description": "Could not get Users due to a problem fetching from the database."
          },
          "500": {
            "description": "There was an issue with the server."
          }
        }
      },
      "post": {
        "tags": ["User"],
        "description": "Creates a new User registered to the database.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User object",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "oauth2": ["write_User", "read_User"]
          }
        ]
      }
    },
    "/user/{id}": {
      "get": {
        "tags": ["User"],
        "description": "Returns one User from the database using a provided ID.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Could not get Users due to a problem fetching from the database."
          }
        }
      },
      "put": {
        "tags": ["User"],
        "description": "Updates a specific User associated to provided ID with new data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User object",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "description": "Deletes a User from the database.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "A valid User ID must be provided."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/achievements/": {
      "get": {
        "tags": ["Achievements"],
        "description": "Returns all achievements (goals) currently registered in the database.",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": ["Achievements"],
        "description": "Creates one achievement object and adds it to the database.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Achievement object",
            "schema": {
              "$ref": "#/definitions/Achievement"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/achievements/{id}": {
      "get": {
        "tags": ["Achievements"],
        "description": "Returns one achievement based on a provided ID.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": ["Achievements"],
        "description": "Updates one achievement based on a provided ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Achievement object",
            "schema": {
              "$ref": "#/definitions/Achievement"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": ["Achievements"],
        "description": "Deletes one achievement from the database associated to a provided ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "example": "Alexx"
        },
        "email": {
          "type": "string",
          "example": "example@test.com"
        },
        "pass": {
          "type": "string",
          "example": "dgfg2235135"
        },
        "bio": {
          "type": "string",
          "example": "A short user-submitted self-description"
        },
        "achievements": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "63f1be5d8d3384a384ba324b"
              },
              "completed": {
                "type": "boolean",
                "example": true
              }
            }
          }
        },
        "points": {
          "type": "number",
          "example": 2000
        },
        "createdDate": {
          "type": "string",
          "example": "12/04/1994"
        }
      }
    },
    "Achievement": {
      "type": "object",
      "properties": {
        "taskName": {
          "type": "string",
          "example": "Clean Kitchen"
        },
        "taskPoints": {
          "type": "number",
          "example": 2000
        }
      }
    }
  }
}
